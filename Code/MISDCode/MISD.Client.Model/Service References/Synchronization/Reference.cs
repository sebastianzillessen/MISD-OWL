//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18033
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MISD.Client.Model.Synchronization {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Synchronization.IClientWebService")]
    public interface IClientWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteCluster", ReplyAction="http://tempuri.org/IClientWebService/DeleteClusterResponse")]
        bool DeleteCluster(int clusterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteCluster", ReplyAction="http://tempuri.org/IClientWebService/DeleteClusterResponse")]
        System.Threading.Tasks.Task<bool> DeleteClusterAsync(int clusterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetClusters", ReplyAction="http://tempuri.org/IClientWebService/GetClustersResponse")]
        System.Collections.Generic.List<System.Tuple<int, string, string, string, string>> GetClusters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetClusters", ReplyAction="http://tempuri.org/IClientWebService/GetClustersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>> GetClustersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetPluginList", ReplyAction="http://tempuri.org/IClientWebService/GetPluginListResponse")]
        System.Collections.Generic.List<MISD.Core.PluginMetadata> GetPluginList(string plattform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetPluginList", ReplyAction="http://tempuri.org/IClientWebService/GetPluginListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.PluginMetadata>> GetPluginListAsync(string plattform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DownloadPlugins", ReplyAction="http://tempuri.org/IClientWebService/DownloadPluginsResponse")]
        System.Collections.Generic.List<MISD.Core.PluginFile> DownloadPlugins(System.Collections.Generic.List<string> pluginNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DownloadPlugins", ReplyAction="http://tempuri.org/IClientWebService/DownloadPluginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.PluginFile>> DownloadPluginsAsync(System.Collections.Generic.List<string> pluginNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetIndicatorSetting", ReplyAction="http://tempuri.org/IClientWebService/GetIndicatorSettingResponse")]
        System.Collections.Generic.List<MISD.Core.IndicatorSettings> GetIndicatorSetting(string monitoredSystemMAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetIndicatorSetting", ReplyAction="http://tempuri.org/IClientWebService/GetIndicatorSettingResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.IndicatorSettings>> GetIndicatorSettingAsync(string monitoredSystemMAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/SetIndicatorSetting", ReplyAction="http://tempuri.org/IClientWebService/SetIndicatorSettingResponse")]
        bool SetIndicatorSetting(System.Collections.Generic.List<MISD.Core.IndicatorSettings> settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/SetIndicatorSetting", ReplyAction="http://tempuri.org/IClientWebService/SetIndicatorSettingResponse")]
        System.Threading.Tasks.Task<bool> SetIndicatorSettingAsync(System.Collections.Generic.List<MISD.Core.IndicatorSettings> settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ResetMapping", ReplyAction="http://tempuri.org/IClientWebService/ResetMappingResponse")]
        bool ResetMapping(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> macList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ResetMapping", ReplyAction="http://tempuri.org/IClientWebService/ResetMappingResponse")]
        System.Threading.Tasks.Task<bool> ResetMappingAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> macList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ActivateMaintenanceMode", ReplyAction="http://tempuri.org/IClientWebService/ActivateMaintenanceModeResponse")]
        System.Collections.Generic.List<string> ActivateMaintenanceMode(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ActivateMaintenanceMode", ReplyAction="http://tempuri.org/IClientWebService/ActivateMaintenanceModeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ActivateMaintenanceModeAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeactivateMaintenanceMode", ReplyAction="http://tempuri.org/IClientWebService/DeactivateMaintenanceModeResponse")]
        System.Collections.Generic.List<string> DeactivateMaintenanceMode(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeactivateMaintenanceMode", ReplyAction="http://tempuri.org/IClientWebService/DeactivateMaintenanceModeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> DeactivateMaintenanceModeAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/MoveMonitoredSystem", ReplyAction="http://tempuri.org/IClientWebService/MoveMonitoredSystemResponse")]
        bool MoveMonitoredSystem(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>> monitoredSystems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/MoveMonitoredSystem", ReplyAction="http://tempuri.org/IClientWebService/MoveMonitoredSystemResponse")]
        System.Threading.Tasks.Task<bool> MoveMonitoredSystemAsync(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>> monitoredSystems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeWorkstationName", ReplyAction="http://tempuri.org/IClientWebService/ChangeWorkstationNameResponse")]
        bool ChangeWorkstationName(string mac, string newName, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeWorkstationName", ReplyAction="http://tempuri.org/IClientWebService/ChangeWorkstationNameResponse")]
        System.Threading.Tasks.Task<bool> ChangeWorkstationNameAsync(string mac, string newName, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetUIConfigurationList", ReplyAction="http://tempuri.org/IClientWebService/GetUIConfigurationListResponse")]
        System.Collections.Generic.List<MISD.Core.Layout> GetUIConfigurationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetUIConfigurationList", ReplyAction="http://tempuri.org/IClientWebService/GetUIConfigurationListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.Layout>> GetUIConfigurationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/AddUIConfigurationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.PluginMetadata>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.IndicatorSettings>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.IndicatorSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.DataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.MappingState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.PluginFile>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.Layout>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.Layout))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.WorkstationInfo>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.WorkstationInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Version))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, int, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, bool>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, bool>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, System.TimeSpan>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
        MISD.Core.Layout AddUIConfiguration(string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/AddUIConfigurationResponse")]
        System.Threading.Tasks.Task<MISD.Core.Layout> AddUIConfigurationAsync(string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/RemoveUIConfigurationResponse")]
        bool RemoveUIConfiguration(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/RemoveUIConfigurationResponse")]
        System.Threading.Tasks.Task<bool> RemoveUIConfigurationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/UpdateUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/UpdateUIConfigurationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.PluginMetadata>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.IndicatorSettings>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.IndicatorSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.DataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.MappingState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.PluginFile>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.Layout>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.Layout))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<MISD.Core.WorkstationInfo>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.WorkstationInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Version))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, int, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, bool>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, bool>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<int, System.TimeSpan>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string, string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
        MISD.Core.Layout UpdateUIConfiguration(int configurationID, string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/UpdateUIConfiguration", ReplyAction="http://tempuri.org/IClientWebService/UpdateUIConfigurationResponse")]
        System.Threading.Tasks.Task<MISD.Core.Layout> UpdateUIConfigurationAsync(int configurationID, string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddMonitoredSystemsToIgnoreList", ReplyAction="http://tempuri.org/IClientWebService/AddMonitoredSystemsToIgnoreListResponse")]
        System.Collections.Generic.List<string> AddMonitoredSystemsToIgnoreList(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddMonitoredSystemsToIgnoreList", ReplyAction="http://tempuri.org/IClientWebService/AddMonitoredSystemsToIgnoreListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddMonitoredSystemsToIgnoreListAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveMonitoredSystemsFromIgnoreList", ReplyAction="http://tempuri.org/IClientWebService/RemoveMonitoredSystemsFromIgnoreListResponse" +
            "")]
        System.Collections.Generic.List<string> RemoveMonitoredSystemsFromIgnoreList(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveMonitoredSystemsFromIgnoreList", ReplyAction="http://tempuri.org/IClientWebService/RemoveMonitoredSystemsFromIgnoreListResponse" +
            "")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> RemoveMonitoredSystemsFromIgnoreListAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetIgnoredMonitoredSystems", ReplyAction="http://tempuri.org/IClientWebService/GetIgnoredMonitoredSystemsResponse")]
        System.Collections.Generic.List<System.Tuple<string, string>> GetIgnoredMonitoredSystems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetIgnoredMonitoredSystems", ReplyAction="http://tempuri.org/IClientWebService/GetIgnoredMonitoredSystemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string>>> GetIgnoredMonitoredSystemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddEMail", ReplyAction="http://tempuri.org/IClientWebService/AddEMailResponse")]
        System.Nullable<int> AddEMail(string emailAdress, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddEMail", ReplyAction="http://tempuri.org/IClientWebService/AddEMailResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> AddEMailAsync(string emailAdress, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveEMail", ReplyAction="http://tempuri.org/IClientWebService/RemoveEMailResponse")]
        bool RemoveEMail(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveEMail", ReplyAction="http://tempuri.org/IClientWebService/RemoveEMailResponse")]
        System.Threading.Tasks.Task<bool> RemoveEMailAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddMailObserver", ReplyAction="http://tempuri.org/IClientWebService/AddMailObserverResponse")]
        bool AddMailObserver(int userID, System.Collections.Generic.List<string> mac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddMailObserver", ReplyAction="http://tempuri.org/IClientWebService/AddMailObserverResponse")]
        System.Threading.Tasks.Task<bool> AddMailObserverAsync(int userID, System.Collections.Generic.List<string> mac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveMailObserver", ReplyAction="http://tempuri.org/IClientWebService/RemoveMailObserverResponse")]
        bool RemoveMailObserver(int userID, System.Collections.Generic.List<string> monitoredSystemMACs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/RemoveMailObserver", ReplyAction="http://tempuri.org/IClientWebService/RemoveMailObserverResponse")]
        System.Threading.Tasks.Task<bool> RemoveMailObserverAsync(int userID, System.Collections.Generic.List<string> monitoredSystemMACs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddDailyMail", ReplyAction="http://tempuri.org/IClientWebService/AddDailyMailResponse")]
        bool AddDailyMail(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddDailyMail", ReplyAction="http://tempuri.org/IClientWebService/AddDailyMailResponse")]
        System.Threading.Tasks.Task<bool> AddDailyMailAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteDailyMail", ReplyAction="http://tempuri.org/IClientWebService/DeleteDailyMailResponse")]
        bool DeleteDailyMail(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteDailyMail", ReplyAction="http://tempuri.org/IClientWebService/DeleteDailyMailResponse")]
        System.Threading.Tasks.Task<bool> DeleteDailyMailAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllMailData", ReplyAction="http://tempuri.org/IClientWebService/GetAllMailDataResponse")]
        System.Collections.Generic.List<System.Tuple<int, string, string, bool>> GetAllMailData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllMailData", ReplyAction="http://tempuri.org/IClientWebService/GetAllMailDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, bool>>> GetAllMailDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetObserver", ReplyAction="http://tempuri.org/IClientWebService/GetObserverResponse")]
        System.Collections.Generic.List<MISD.Core.WorkstationInfo> GetObserver(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetObserver", ReplyAction="http://tempuri.org/IClientWebService/GetObserverResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.WorkstationInfo>> GetObserverAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeEmail", ReplyAction="http://tempuri.org/IClientWebService/ChangeEmailResponse")]
        bool ChangeEmail(int userID, string userNameNew, string mailAdressNew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeEmail", ReplyAction="http://tempuri.org/IClientWebService/ChangeEmailResponse")]
        System.Threading.Tasks.Task<bool> ChangeEmailAsync(int userID, string userNameNew, string mailAdressNew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeOUName", ReplyAction="http://tempuri.org/IClientWebService/ChangeOUNameResponse")]
        bool ChangeOUName(int ouID, string newName, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeOUName", ReplyAction="http://tempuri.org/IClientWebService/ChangeOUNameResponse")]
        System.Threading.Tasks.Task<bool> ChangeOUNameAsync(int ouID, string newName, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteOU", ReplyAction="http://tempuri.org/IClientWebService/DeleteOUResponse")]
        bool DeleteOU(int ouID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/DeleteOU", ReplyAction="http://tempuri.org/IClientWebService/DeleteOUResponse")]
        System.Threading.Tasks.Task<bool> DeleteOUAsync(int ouID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddOU", ReplyAction="http://tempuri.org/IClientWebService/AddOUResponse")]
        int AddOU(string name, System.Nullable<int> fatherOU, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddOU", ReplyAction="http://tempuri.org/IClientWebService/AddOUResponse")]
        System.Threading.Tasks.Task<int> AddOUAsync(string name, System.Nullable<int> fatherOU, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AssignToOU", ReplyAction="http://tempuri.org/IClientWebService/AssignToOUResponse")]
        bool AssignToOU(string monitoredSystemMAC, int newOUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AssignToOU", ReplyAction="http://tempuri.org/IClientWebService/AssignToOUResponse")]
        System.Threading.Tasks.Task<bool> AssignToOUAsync(string monitoredSystemMAC, int newOUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllOUs", ReplyAction="http://tempuri.org/IClientWebService/GetAllOUsResponse")]
        System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>> GetAllOUs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllOUs", ReplyAction="http://tempuri.org/IClientWebService/GetAllOUsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>>> GetAllOUsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeParent", ReplyAction="http://tempuri.org/IClientWebService/ChangeParentResponse")]
        bool ChangeParent(int ouID, System.Nullable<int> ouIDParent, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeParent", ReplyAction="http://tempuri.org/IClientWebService/ChangeParentResponse")]
        System.Threading.Tasks.Task<bool> ChangeParentAsync(int ouID, System.Nullable<int> ouIDParent, System.DateTime updateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllPlatformTyps", ReplyAction="http://tempuri.org/IClientWebService/GetAllPlatformTypsResponse")]
        System.Collections.Generic.List<string> GetAllPlatformTyps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetAllPlatformTyps", ReplyAction="http://tempuri.org/IClientWebService/GetAllPlatformTypsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPlatformTypsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetMonitoredSystemIDs", ReplyAction="http://tempuri.org/IClientWebService/GetMonitoredSystemIDsResponse")]
        System.Collections.Generic.List<int> GetMonitoredSystemIDs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetMonitoredSystemIDs", ReplyAction="http://tempuri.org/IClientWebService/GetMonitoredSystemIDsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetMonitoredSystemIDsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetWorkstationMACs", ReplyAction="http://tempuri.org/IClientWebService/GetWorkstationMACsResponse")]
        System.Collections.Generic.List<string> GetWorkstationMACs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetWorkstationMACs", ReplyAction="http://tempuri.org/IClientWebService/GetWorkstationMACsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetWorkstationMACsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetMonitoredSystemInfo", ReplyAction="http://tempuri.org/IClientWebService/GetMonitoredSystemInfoResponse")]
        System.Collections.Generic.List<MISD.Core.WorkstationInfo> GetMonitoredSystemInfo(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>> monitoredSystemIDsWithResetTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetMonitoredSystemInfo", ReplyAction="http://tempuri.org/IClientWebService/GetMonitoredSystemInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.WorkstationInfo>> GetMonitoredSystemInfoAsync(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>> monitoredSystemIDsWithResetTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetLatestMonitoredSystemData", ReplyAction="http://tempuri.org/IClientWebService/GetLatestMonitoredSystemDataResponse")]
        System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetLatestMonitoredSystemData(System.Collections.Generic.List<string> macList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetLatestMonitoredSystemData", ReplyAction="http://tempuri.org/IClientWebService/GetLatestMonitoredSystemDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetLatestMonitoredSystemDataAsync(System.Collections.Generic.List<string> macList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetPluginData", ReplyAction="http://tempuri.org/IClientWebService/GetPluginDataResponse")]
        System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetPluginData(System.Collections.Generic.List<System.Tuple<string, string>> macAndPluginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetPluginData", ReplyAction="http://tempuri.org/IClientWebService/GetPluginDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetPluginDataAsync(System.Collections.Generic.List<System.Tuple<string, string>> macAndPluginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetCompletePluginDataList", ReplyAction="http://tempuri.org/IClientWebService/GetCompletePluginDataListResponse")]
        System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetCompletePluginDataList(System.Collections.Generic.List<string> macList, System.Nullable<int> numberOfIndicators);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetCompletePluginDataList", ReplyAction="http://tempuri.org/IClientWebService/GetCompletePluginDataListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetCompletePluginDataListAsync(System.Collections.Generic.List<string> macList, System.Nullable<int> numberOfIndicators);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetData", ReplyAction="http://tempuri.org/IClientWebService/GetDataResponse")]
        System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetData(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>> macAndProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetData", ReplyAction="http://tempuri.org/IClientWebService/GetDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetDataAsync(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>> macAndProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetClusterTyps", ReplyAction="http://tempuri.org/IClientWebService/GetClusterTypsResponse")]
        System.Collections.Generic.List<string> GetClusterTyps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/GetClusterTyps", ReplyAction="http://tempuri.org/IClientWebService/GetClusterTypsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetClusterTypsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddCluster", ReplyAction="http://tempuri.org/IClientWebService/AddClusterResponse")]
        int AddCluster(string headnodeAddress, string username, string password, string platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/AddCluster", ReplyAction="http://tempuri.org/IClientWebService/AddClusterResponse")]
        System.Threading.Tasks.Task<int> AddClusterAsync(string headnodeAddress, string username, string password, string platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeCluster", ReplyAction="http://tempuri.org/IClientWebService/ChangeClusterResponse")]
        bool ChangeCluster(int id, System.Tuple<string, string, string, string> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientWebService/ChangeCluster", ReplyAction="http://tempuri.org/IClientWebService/ChangeClusterResponse")]
        System.Threading.Tasks.Task<bool> ChangeClusterAsync(int id, System.Tuple<string, string, string, string> data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientWebServiceChannel : MISD.Client.Model.Synchronization.IClientWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientWebServiceClient : System.ServiceModel.ClientBase<MISD.Client.Model.Synchronization.IClientWebService>, MISD.Client.Model.Synchronization.IClientWebService {
        
        public ClientWebServiceClient() {
        }
        
        public ClientWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DeleteCluster(int clusterID) {
            return base.Channel.DeleteCluster(clusterID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClusterAsync(int clusterID) {
            return base.Channel.DeleteClusterAsync(clusterID);
        }
        
        public System.Collections.Generic.List<System.Tuple<int, string, string, string, string>> GetClusters() {
            return base.Channel.GetClusters();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>> GetClustersAsync() {
            return base.Channel.GetClustersAsync();
        }
        
        public System.Collections.Generic.List<MISD.Core.PluginMetadata> GetPluginList(string plattform) {
            return base.Channel.GetPluginList(plattform);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.PluginMetadata>> GetPluginListAsync(string plattform) {
            return base.Channel.GetPluginListAsync(plattform);
        }
        
        public System.Collections.Generic.List<MISD.Core.PluginFile> DownloadPlugins(System.Collections.Generic.List<string> pluginNames) {
            return base.Channel.DownloadPlugins(pluginNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.PluginFile>> DownloadPluginsAsync(System.Collections.Generic.List<string> pluginNames) {
            return base.Channel.DownloadPluginsAsync(pluginNames);
        }
        
        public System.Collections.Generic.List<MISD.Core.IndicatorSettings> GetIndicatorSetting(string monitoredSystemMAC) {
            return base.Channel.GetIndicatorSetting(monitoredSystemMAC);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.IndicatorSettings>> GetIndicatorSettingAsync(string monitoredSystemMAC) {
            return base.Channel.GetIndicatorSettingAsync(monitoredSystemMAC);
        }
        
        public bool SetIndicatorSetting(System.Collections.Generic.List<MISD.Core.IndicatorSettings> settings) {
            return base.Channel.SetIndicatorSetting(settings);
        }
        
        public System.Threading.Tasks.Task<bool> SetIndicatorSettingAsync(System.Collections.Generic.List<MISD.Core.IndicatorSettings> settings) {
            return base.Channel.SetIndicatorSettingAsync(settings);
        }
        
        public bool ResetMapping(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> macList) {
            return base.Channel.ResetMapping(macList);
        }
        
        public System.Threading.Tasks.Task<bool> ResetMappingAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> macList) {
            return base.Channel.ResetMappingAsync(macList);
        }
        
        public System.Collections.Generic.List<string> ActivateMaintenanceMode(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.ActivateMaintenanceMode(monitoredSystemMACAddresses);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ActivateMaintenanceModeAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.ActivateMaintenanceModeAsync(monitoredSystemMACAddresses);
        }
        
        public System.Collections.Generic.List<string> DeactivateMaintenanceMode(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.DeactivateMaintenanceMode(monitoredSystemMACAddresses);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> DeactivateMaintenanceModeAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.DeactivateMaintenanceModeAsync(monitoredSystemMACAddresses);
        }
        
        public bool MoveMonitoredSystem(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>> monitoredSystems) {
            return base.Channel.MoveMonitoredSystem(monitoredSystems);
        }
        
        public System.Threading.Tasks.Task<bool> MoveMonitoredSystemAsync(System.Collections.Generic.List<System.Tuple<string, int, System.DateTime>> monitoredSystems) {
            return base.Channel.MoveMonitoredSystemAsync(monitoredSystems);
        }
        
        public bool ChangeWorkstationName(string mac, string newName, System.DateTime updateTime) {
            return base.Channel.ChangeWorkstationName(mac, newName, updateTime);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeWorkstationNameAsync(string mac, string newName, System.DateTime updateTime) {
            return base.Channel.ChangeWorkstationNameAsync(mac, newName, updateTime);
        }
        
        public System.Collections.Generic.List<MISD.Core.Layout> GetUIConfigurationList() {
            return base.Channel.GetUIConfigurationList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.Layout>> GetUIConfigurationListAsync() {
            return base.Channel.GetUIConfigurationListAsync();
        }
        
        public MISD.Core.Layout AddUIConfiguration(string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date) {
            return base.Channel.AddUIConfiguration(name, userName, previewImageAsBase64, data, Date);
        }
        
        public System.Threading.Tasks.Task<MISD.Core.Layout> AddUIConfigurationAsync(string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date) {
            return base.Channel.AddUIConfigurationAsync(name, userName, previewImageAsBase64, data, Date);
        }
        
        public bool RemoveUIConfiguration(int id) {
            return base.Channel.RemoveUIConfiguration(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUIConfigurationAsync(int id) {
            return base.Channel.RemoveUIConfigurationAsync(id);
        }
        
        public MISD.Core.Layout UpdateUIConfiguration(int configurationID, string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date) {
            return base.Channel.UpdateUIConfiguration(configurationID, name, userName, previewImageAsBase64, data, Date);
        }
        
        public System.Threading.Tasks.Task<MISD.Core.Layout> UpdateUIConfigurationAsync(int configurationID, string name, string userName, byte[] previewImageAsBase64, object data, System.DateTime Date) {
            return base.Channel.UpdateUIConfigurationAsync(configurationID, name, userName, previewImageAsBase64, data, Date);
        }
        
        public System.Collections.Generic.List<string> AddMonitoredSystemsToIgnoreList(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.AddMonitoredSystemsToIgnoreList(monitoredSystemMACAddresses);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddMonitoredSystemsToIgnoreListAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.AddMonitoredSystemsToIgnoreListAsync(monitoredSystemMACAddresses);
        }
        
        public System.Collections.Generic.List<string> RemoveMonitoredSystemsFromIgnoreList(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.RemoveMonitoredSystemsFromIgnoreList(monitoredSystemMACAddresses);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> RemoveMonitoredSystemsFromIgnoreListAsync(System.Collections.Generic.List<System.Tuple<string, System.DateTime>> monitoredSystemMACAddresses) {
            return base.Channel.RemoveMonitoredSystemsFromIgnoreListAsync(monitoredSystemMACAddresses);
        }
        
        public System.Collections.Generic.List<System.Tuple<string, string>> GetIgnoredMonitoredSystems() {
            return base.Channel.GetIgnoredMonitoredSystems();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string>>> GetIgnoredMonitoredSystemsAsync() {
            return base.Channel.GetIgnoredMonitoredSystemsAsync();
        }
        
        public System.Nullable<int> AddEMail(string emailAdress, string userName) {
            return base.Channel.AddEMail(emailAdress, userName);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> AddEMailAsync(string emailAdress, string userName) {
            return base.Channel.AddEMailAsync(emailAdress, userName);
        }
        
        public bool RemoveEMail(int userID) {
            return base.Channel.RemoveEMail(userID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEMailAsync(int userID) {
            return base.Channel.RemoveEMailAsync(userID);
        }
        
        public bool AddMailObserver(int userID, System.Collections.Generic.List<string> mac) {
            return base.Channel.AddMailObserver(userID, mac);
        }
        
        public System.Threading.Tasks.Task<bool> AddMailObserverAsync(int userID, System.Collections.Generic.List<string> mac) {
            return base.Channel.AddMailObserverAsync(userID, mac);
        }
        
        public bool RemoveMailObserver(int userID, System.Collections.Generic.List<string> monitoredSystemMACs) {
            return base.Channel.RemoveMailObserver(userID, monitoredSystemMACs);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMailObserverAsync(int userID, System.Collections.Generic.List<string> monitoredSystemMACs) {
            return base.Channel.RemoveMailObserverAsync(userID, monitoredSystemMACs);
        }
        
        public bool AddDailyMail(int userID) {
            return base.Channel.AddDailyMail(userID);
        }
        
        public System.Threading.Tasks.Task<bool> AddDailyMailAsync(int userID) {
            return base.Channel.AddDailyMailAsync(userID);
        }
        
        public bool DeleteDailyMail(int userID) {
            return base.Channel.DeleteDailyMail(userID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDailyMailAsync(int userID) {
            return base.Channel.DeleteDailyMailAsync(userID);
        }
        
        public System.Collections.Generic.List<System.Tuple<int, string, string, bool>> GetAllMailData() {
            return base.Channel.GetAllMailData();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, bool>>> GetAllMailDataAsync() {
            return base.Channel.GetAllMailDataAsync();
        }
        
        public System.Collections.Generic.List<MISD.Core.WorkstationInfo> GetObserver(int userID) {
            return base.Channel.GetObserver(userID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.WorkstationInfo>> GetObserverAsync(int userID) {
            return base.Channel.GetObserverAsync(userID);
        }
        
        public bool ChangeEmail(int userID, string userNameNew, string mailAdressNew) {
            return base.Channel.ChangeEmail(userID, userNameNew, mailAdressNew);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeEmailAsync(int userID, string userNameNew, string mailAdressNew) {
            return base.Channel.ChangeEmailAsync(userID, userNameNew, mailAdressNew);
        }
        
        public bool ChangeOUName(int ouID, string newName, System.DateTime updateTime) {
            return base.Channel.ChangeOUName(ouID, newName, updateTime);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeOUNameAsync(int ouID, string newName, System.DateTime updateTime) {
            return base.Channel.ChangeOUNameAsync(ouID, newName, updateTime);
        }
        
        public bool DeleteOU(int ouID) {
            return base.Channel.DeleteOU(ouID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOUAsync(int ouID) {
            return base.Channel.DeleteOUAsync(ouID);
        }
        
        public int AddOU(string name, System.Nullable<int> fatherOU, System.DateTime updateTime) {
            return base.Channel.AddOU(name, fatherOU, updateTime);
        }
        
        public System.Threading.Tasks.Task<int> AddOUAsync(string name, System.Nullable<int> fatherOU, System.DateTime updateTime) {
            return base.Channel.AddOUAsync(name, fatherOU, updateTime);
        }
        
        public bool AssignToOU(string monitoredSystemMAC, int newOUID) {
            return base.Channel.AssignToOU(monitoredSystemMAC, newOUID);
        }
        
        public System.Threading.Tasks.Task<bool> AssignToOUAsync(string monitoredSystemMAC, int newOUID) {
            return base.Channel.AssignToOUAsync(monitoredSystemMAC, newOUID);
        }
        
        public System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>> GetAllOUs() {
            return base.Channel.GetAllOUs();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, System.Nullable<int>, System.Nullable<System.DateTime>>>> GetAllOUsAsync() {
            return base.Channel.GetAllOUsAsync();
        }
        
        public bool ChangeParent(int ouID, System.Nullable<int> ouIDParent, System.DateTime updateTime) {
            return base.Channel.ChangeParent(ouID, ouIDParent, updateTime);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeParentAsync(int ouID, System.Nullable<int> ouIDParent, System.DateTime updateTime) {
            return base.Channel.ChangeParentAsync(ouID, ouIDParent, updateTime);
        }
        
        public System.Collections.Generic.List<string> GetAllPlatformTyps() {
            return base.Channel.GetAllPlatformTyps();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPlatformTypsAsync() {
            return base.Channel.GetAllPlatformTypsAsync();
        }
        
        public System.Collections.Generic.List<int> GetMonitoredSystemIDs() {
            return base.Channel.GetMonitoredSystemIDs();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetMonitoredSystemIDsAsync() {
            return base.Channel.GetMonitoredSystemIDsAsync();
        }
        
        public System.Collections.Generic.List<string> GetWorkstationMACs() {
            return base.Channel.GetWorkstationMACs();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetWorkstationMACsAsync() {
            return base.Channel.GetWorkstationMACsAsync();
        }
        
        public System.Collections.Generic.List<MISD.Core.WorkstationInfo> GetMonitoredSystemInfo(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>> monitoredSystemIDsWithResetTime) {
            return base.Channel.GetMonitoredSystemInfo(monitoredSystemIDsWithResetTime);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MISD.Core.WorkstationInfo>> GetMonitoredSystemInfoAsync(System.Collections.Generic.List<System.Tuple<int, System.TimeSpan>> monitoredSystemIDsWithResetTime) {
            return base.Channel.GetMonitoredSystemInfoAsync(monitoredSystemIDsWithResetTime);
        }
        
        public System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetLatestMonitoredSystemData(System.Collections.Generic.List<string> macList) {
            return base.Channel.GetLatestMonitoredSystemData(macList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetLatestMonitoredSystemDataAsync(System.Collections.Generic.List<string> macList) {
            return base.Channel.GetLatestMonitoredSystemDataAsync(macList);
        }
        
        public System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetPluginData(System.Collections.Generic.List<System.Tuple<string, string>> macAndPluginName) {
            return base.Channel.GetPluginData(macAndPluginName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetPluginDataAsync(System.Collections.Generic.List<System.Tuple<string, string>> macAndPluginName) {
            return base.Channel.GetPluginDataAsync(macAndPluginName);
        }
        
        public System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetCompletePluginDataList(System.Collections.Generic.List<string> macList, System.Nullable<int> numberOfIndicators) {
            return base.Channel.GetCompletePluginDataList(macList, numberOfIndicators);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetCompletePluginDataListAsync(System.Collections.Generic.List<string> macList, System.Nullable<int> numberOfIndicators) {
            return base.Channel.GetCompletePluginDataListAsync(macList, numberOfIndicators);
        }
        
        public System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>> GetData(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>> macAndProperties) {
            return base.Channel.GetData(macAndProperties);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string, string, string, MISD.Core.MappingState, System.DateTime>>> GetDataAsync(System.Collections.Generic.List<System.Tuple<string, string, string, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<int>>> macAndProperties) {
            return base.Channel.GetDataAsync(macAndProperties);
        }
        
        public System.Collections.Generic.List<string> GetClusterTyps() {
            return base.Channel.GetClusterTyps();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetClusterTypsAsync() {
            return base.Channel.GetClusterTypsAsync();
        }
        
        public int AddCluster(string headnodeAddress, string username, string password, string platform) {
            return base.Channel.AddCluster(headnodeAddress, username, password, platform);
        }
        
        public System.Threading.Tasks.Task<int> AddClusterAsync(string headnodeAddress, string username, string password, string platform) {
            return base.Channel.AddClusterAsync(headnodeAddress, username, password, platform);
        }
        
        public bool ChangeCluster(int id, System.Tuple<string, string, string, string> data) {
            return base.Channel.ChangeCluster(id, data);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeClusterAsync(int id, System.Tuple<string, string, string, string> data) {
            return base.Channel.ChangeClusterAsync(id, data);
        }
    }
}
