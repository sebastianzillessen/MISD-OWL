//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.17929
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MISD.Workstation.Linux.WSWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSWebService.IWorkstationWebService")]
    public interface IWorkstationWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetMainUpdateInterval", ReplyAction="http://tempuri.org/IWorkstationWebService/GetMainUpdateIntervalResponse")]
        System.TimeSpan GetMainUpdateInterval();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/SignIn", ReplyAction="http://tempuri.org/IWorkstationWebService/SignInResponse")]
        bool SignIn(string monitoredSystemFQDN, string monitoredSystemMAC, byte operatingSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/SignOut", ReplyAction="http://tempuri.org/IWorkstationWebService/SignOutResponse")]
        bool SignOut(string monitoredSystemMAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetPluginList", ReplyAction="http://tempuri.org/IWorkstationWebService/GetPluginListResponse")]
        MISD.Core.PluginMetadata[] GetPluginList(string monitoredSystemMAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/DownloadPlugins", ReplyAction="http://tempuri.org/IWorkstationWebService/DownloadPluginsResponse")]
        MISD.Core.PluginFile[] DownloadPlugins(string monitoredSystemMAC, string[] pluginNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/UploadIndicatorValues", ReplyAction="http://tempuri.org/IWorkstationWebService/UploadIndicatorValuesResponse")]
        bool UploadIndicatorValues(string monitoredSystemMAC, string pluginName, System.Tuple<string, object, MISD.Core.DataType, System.DateTime>[] indicatorValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/UploadIndicatorValue", ReplyAction="http://tempuri.org/IWorkstationWebService/UploadIndicatorValueResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Version))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, object, MISD.Core.DataType, System.DateTime>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, object, MISD.Core.DataType, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, System.Nullable<long>>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<string, System.Nullable<long>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginMetadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.IndicatorSettings[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.IndicatorSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.DataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginFile[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.PluginFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MISD.Core.LogType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        bool UploadIndicatorValue(string monitoredSystemMAC, string pluginName, string indicatorValueName, object value, MISD.Core.DataType valueDataType, System.DateTime aquiredTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetFilters", ReplyAction="http://tempuri.org/IWorkstationWebService/GetFiltersResponse")]
        System.Tuple<string, string>[] GetFilters(string monitoredSystemMAC, string pluginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetFilter", ReplyAction="http://tempuri.org/IWorkstationWebService/GetFilterResponse")]
        string GetFilter(string monitoredSystemMAC, string pluginName, string indicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetUpdateIntervals", ReplyAction="http://tempuri.org/IWorkstationWebService/GetUpdateIntervalsResponse")]
        System.Tuple<string, System.Nullable<long>>[] GetUpdateIntervals(string monitoredSystemMAC, string pluginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/GetUpdateInterval", ReplyAction="http://tempuri.org/IWorkstationWebService/GetUpdateIntervalResponse")]
        long GetUpdateInterval(string monitoredSystemMAC, string pluginName, string indicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkstationWebService/WriteLog", ReplyAction="http://tempuri.org/IWorkstationWebService/WriteLogResponse")]
        void WriteLog(string message, MISD.Core.LogType type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkstationWebServiceChannel : MISD.Workstation.Linux.WSWebService.IWorkstationWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkstationWebServiceClient : System.ServiceModel.ClientBase<MISD.Workstation.Linux.WSWebService.IWorkstationWebService>, MISD.Workstation.Linux.WSWebService.IWorkstationWebService {
        
        public WorkstationWebServiceClient() {
        }
        
        public WorkstationWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkstationWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkstationWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkstationWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.TimeSpan GetMainUpdateInterval() {
            return base.Channel.GetMainUpdateInterval();
        }
        
        public bool SignIn(string monitoredSystemFQDN, string monitoredSystemMAC, byte operatingSystem) {
            return base.Channel.SignIn(monitoredSystemFQDN, monitoredSystemMAC, operatingSystem);
        }
        
        public bool SignOut(string monitoredSystemMAC) {
            return base.Channel.SignOut(monitoredSystemMAC);
        }
        
        public MISD.Core.PluginMetadata[] GetPluginList(string monitoredSystemMAC) {
            return base.Channel.GetPluginList(monitoredSystemMAC);
        }
        
        public MISD.Core.PluginFile[] DownloadPlugins(string monitoredSystemMAC, string[] pluginNames) {
            return base.Channel.DownloadPlugins(monitoredSystemMAC, pluginNames);
        }
        
        public bool UploadIndicatorValues(string monitoredSystemMAC, string pluginName, System.Tuple<string, object, MISD.Core.DataType, System.DateTime>[] indicatorValues) {
            return base.Channel.UploadIndicatorValues(monitoredSystemMAC, pluginName, indicatorValues);
        }
        
        public bool UploadIndicatorValue(string monitoredSystemMAC, string pluginName, string indicatorValueName, object value, MISD.Core.DataType valueDataType, System.DateTime aquiredTimestamp) {
            return base.Channel.UploadIndicatorValue(monitoredSystemMAC, pluginName, indicatorValueName, value, valueDataType, aquiredTimestamp);
        }
        
        public System.Tuple<string, string>[] GetFilters(string monitoredSystemMAC, string pluginName) {
            return base.Channel.GetFilters(monitoredSystemMAC, pluginName);
        }
        
        public string GetFilter(string monitoredSystemMAC, string pluginName, string indicatorName) {
            return base.Channel.GetFilter(monitoredSystemMAC, pluginName, indicatorName);
        }
        
        public System.Tuple<string, System.Nullable<long>>[] GetUpdateIntervals(string monitoredSystemMAC, string pluginName) {
            return base.Channel.GetUpdateIntervals(monitoredSystemMAC, pluginName);
        }
        
        public long GetUpdateInterval(string monitoredSystemMAC, string pluginName, string indicatorName) {
            return base.Channel.GetUpdateInterval(monitoredSystemMAC, pluginName, indicatorName);
        }
        
        public void WriteLog(string message, MISD.Core.LogType type) {
            base.Channel.WriteLog(message, type);
        }
    }
}
