//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.17929
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace MISD.Workstation.Linux.WSWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IWorkstationWebService", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TupleOfstringanyTypeDataTypedateTimefLvhoF9L[]))]
    public partial class WorkstationWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMainUpdateIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPluginListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadPluginsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadIndicatorValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadIndicatorValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFiltersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdateIntervalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdateIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteLogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WorkstationWebService() {
            this.Url = global::MISD.Workstation.Linux.Properties.Settings.Default.MISD_Workstation_Linux_WSWebService_WorkstationWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMainUpdateIntervalCompletedEventHandler GetMainUpdateIntervalCompleted;
        
        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;
        
        /// <remarks/>
        public event SignOutCompletedEventHandler SignOutCompleted;
        
        /// <remarks/>
        public event GetPluginListCompletedEventHandler GetPluginListCompleted;
        
        /// <remarks/>
        public event DownloadPluginsCompletedEventHandler DownloadPluginsCompleted;
        
        /// <remarks/>
        public event UploadIndicatorValuesCompletedEventHandler UploadIndicatorValuesCompleted;
        
        /// <remarks/>
        public event UploadIndicatorValueCompletedEventHandler UploadIndicatorValueCompleted;
        
        /// <remarks/>
        public event GetFiltersCompletedEventHandler GetFiltersCompleted;
        
        /// <remarks/>
        public event GetFilterCompletedEventHandler GetFilterCompleted;
        
        /// <remarks/>
        public event GetUpdateIntervalsCompletedEventHandler GetUpdateIntervalsCompleted;
        
        /// <remarks/>
        public event GetUpdateIntervalCompletedEventHandler GetUpdateIntervalCompleted;
        
        /// <remarks/>
        public event WriteLogCompletedEventHandler WriteLogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetMainUpdateInterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="duration")]
        public string GetMainUpdateInterval() {
            object[] results = this.Invoke("GetMainUpdateInterval", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMainUpdateIntervalAsync() {
            this.GetMainUpdateIntervalAsync(null);
        }
        
        /// <remarks/>
        public void GetMainUpdateIntervalAsync(object userState) {
            if ((this.GetMainUpdateIntervalOperationCompleted == null)) {
                this.GetMainUpdateIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMainUpdateIntervalOperationCompleted);
            }
            this.InvokeAsync("GetMainUpdateInterval", new object[0], this.GetMainUpdateIntervalOperationCompleted, userState);
        }
        
        private void OnGetMainUpdateIntervalOperationCompleted(object arg) {
            if ((this.GetMainUpdateIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMainUpdateIntervalCompleted(this, new GetMainUpdateIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/SignIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SignIn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemFQDN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, byte operatingSystem, [System.Xml.Serialization.XmlIgnoreAttribute()] bool operatingSystemSpecified, out bool SignInResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SignInResultSpecified) {
            object[] results = this.Invoke("SignIn", new object[] {
                        monitoredSystemFQDN,
                        monitoredSystemMAC,
                        operatingSystem,
                        operatingSystemSpecified});
            SignInResult = ((bool)(results[0]));
            SignInResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SignInAsync(string monitoredSystemFQDN, string monitoredSystemMAC, byte operatingSystem, bool operatingSystemSpecified) {
            this.SignInAsync(monitoredSystemFQDN, monitoredSystemMAC, operatingSystem, operatingSystemSpecified, null);
        }
        
        /// <remarks/>
        public void SignInAsync(string monitoredSystemFQDN, string monitoredSystemMAC, byte operatingSystem, bool operatingSystemSpecified, object userState) {
            if ((this.SignInOperationCompleted == null)) {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[] {
                        monitoredSystemFQDN,
                        monitoredSystemMAC,
                        operatingSystem,
                        operatingSystemSpecified}, this.SignInOperationCompleted, userState);
        }
        
        private void OnSignInOperationCompleted(object arg) {
            if ((this.SignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/SignOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SignOut([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, out bool SignOutResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SignOutResultSpecified) {
            object[] results = this.Invoke("SignOut", new object[] {
                        monitoredSystemMAC});
            SignOutResult = ((bool)(results[0]));
            SignOutResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SignOutAsync(string monitoredSystemMAC) {
            this.SignOutAsync(monitoredSystemMAC, null);
        }
        
        /// <remarks/>
        public void SignOutAsync(string monitoredSystemMAC, object userState) {
            if ((this.SignOutOperationCompleted == null)) {
                this.SignOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignOutOperationCompleted);
            }
            this.InvokeAsync("SignOut", new object[] {
                        monitoredSystemMAC}, this.SignOutOperationCompleted, userState);
        }
        
        private void OnSignOutOperationCompleted(object arg) {
            if ((this.SignOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignOutCompleted(this, new SignOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetPluginList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
        public PluginMetadata[] GetPluginList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC) {
            object[] results = this.Invoke("GetPluginList", new object[] {
                        monitoredSystemMAC});
            return ((PluginMetadata[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPluginListAsync(string monitoredSystemMAC) {
            this.GetPluginListAsync(monitoredSystemMAC, null);
        }
        
        /// <remarks/>
        public void GetPluginListAsync(string monitoredSystemMAC, object userState) {
            if ((this.GetPluginListOperationCompleted == null)) {
                this.GetPluginListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPluginListOperationCompleted);
            }
            this.InvokeAsync("GetPluginList", new object[] {
                        monitoredSystemMAC}, this.GetPluginListOperationCompleted, userState);
        }
        
        private void OnGetPluginListOperationCompleted(object arg) {
            if ((this.GetPluginListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPluginListCompleted(this, new GetPluginListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/DownloadPlugins", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
        public PluginFile[] DownloadPlugins([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] pluginNames) {
            object[] results = this.Invoke("DownloadPlugins", new object[] {
                        monitoredSystemMAC,
                        pluginNames});
            return ((PluginFile[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadPluginsAsync(string monitoredSystemMAC, string[] pluginNames) {
            this.DownloadPluginsAsync(monitoredSystemMAC, pluginNames, null);
        }
        
        /// <remarks/>
        public void DownloadPluginsAsync(string monitoredSystemMAC, string[] pluginNames, object userState) {
            if ((this.DownloadPluginsOperationCompleted == null)) {
                this.DownloadPluginsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadPluginsOperationCompleted);
            }
            this.InvokeAsync("DownloadPlugins", new object[] {
                        monitoredSystemMAC,
                        pluginNames}, this.DownloadPluginsOperationCompleted, userState);
        }
        
        private void OnDownloadPluginsOperationCompleted(object arg) {
            if ((this.DownloadPluginsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadPluginsCompleted(this, new DownloadPluginsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/UploadIndicatorValues", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadIndicatorValues([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")] TupleOfstringanyTypeDataTypedateTimefLvhoF9L[] indicatorValues, out bool UploadIndicatorValuesResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UploadIndicatorValuesResultSpecified) {
            object[] results = this.Invoke("UploadIndicatorValues", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorValues});
            UploadIndicatorValuesResult = ((bool)(results[0]));
            UploadIndicatorValuesResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UploadIndicatorValuesAsync(string monitoredSystemMAC, string pluginName, TupleOfstringanyTypeDataTypedateTimefLvhoF9L[] indicatorValues) {
            this.UploadIndicatorValuesAsync(monitoredSystemMAC, pluginName, indicatorValues, null);
        }
        
        /// <remarks/>
        public void UploadIndicatorValuesAsync(string monitoredSystemMAC, string pluginName, TupleOfstringanyTypeDataTypedateTimefLvhoF9L[] indicatorValues, object userState) {
            if ((this.UploadIndicatorValuesOperationCompleted == null)) {
                this.UploadIndicatorValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadIndicatorValuesOperationCompleted);
            }
            this.InvokeAsync("UploadIndicatorValues", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorValues}, this.UploadIndicatorValuesOperationCompleted, userState);
        }
        
        private void OnUploadIndicatorValuesOperationCompleted(object arg) {
            if ((this.UploadIndicatorValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadIndicatorValuesCompleted(this, new UploadIndicatorValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/UploadIndicatorValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadIndicatorValue([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string indicatorValueName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] object value, DataType valueDataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool valueDataTypeSpecified, System.DateTime aquiredTimestamp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool aquiredTimestampSpecified, out bool UploadIndicatorValueResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UploadIndicatorValueResultSpecified) {
            object[] results = this.Invoke("UploadIndicatorValue", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorValueName,
                        value,
                        valueDataType,
                        valueDataTypeSpecified,
                        aquiredTimestamp,
                        aquiredTimestampSpecified});
            UploadIndicatorValueResult = ((bool)(results[0]));
            UploadIndicatorValueResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UploadIndicatorValueAsync(string monitoredSystemMAC, string pluginName, string indicatorValueName, object value, DataType valueDataType, bool valueDataTypeSpecified, System.DateTime aquiredTimestamp, bool aquiredTimestampSpecified) {
            this.UploadIndicatorValueAsync(monitoredSystemMAC, pluginName, indicatorValueName, value, valueDataType, valueDataTypeSpecified, aquiredTimestamp, aquiredTimestampSpecified, null);
        }
        
        /// <remarks/>
        public void UploadIndicatorValueAsync(string monitoredSystemMAC, string pluginName, string indicatorValueName, object value, DataType valueDataType, bool valueDataTypeSpecified, System.DateTime aquiredTimestamp, bool aquiredTimestampSpecified, object userState) {
            if ((this.UploadIndicatorValueOperationCompleted == null)) {
                this.UploadIndicatorValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadIndicatorValueOperationCompleted);
            }
            this.InvokeAsync("UploadIndicatorValue", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorValueName,
                        value,
                        valueDataType,
                        valueDataTypeSpecified,
                        aquiredTimestamp,
                        aquiredTimestampSpecified}, this.UploadIndicatorValueOperationCompleted, userState);
        }
        
        private void OnUploadIndicatorValueOperationCompleted(object arg) {
            if ((this.UploadIndicatorValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadIndicatorValueCompleted(this, new UploadIndicatorValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetFilters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
        public TupleOfstringstring[] GetFilters([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName) {
            object[] results = this.Invoke("GetFilters", new object[] {
                        monitoredSystemMAC,
                        pluginName});
            return ((TupleOfstringstring[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFiltersAsync(string monitoredSystemMAC, string pluginName) {
            this.GetFiltersAsync(monitoredSystemMAC, pluginName, null);
        }
        
        /// <remarks/>
        public void GetFiltersAsync(string monitoredSystemMAC, string pluginName, object userState) {
            if ((this.GetFiltersOperationCompleted == null)) {
                this.GetFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFiltersOperationCompleted);
            }
            this.InvokeAsync("GetFilters", new object[] {
                        monitoredSystemMAC,
                        pluginName}, this.GetFiltersOperationCompleted, userState);
        }
        
        private void OnGetFiltersOperationCompleted(object arg) {
            if ((this.GetFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFiltersCompleted(this, new GetFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetFilter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetFilter([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string indicatorName) {
            object[] results = this.Invoke("GetFilter", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilterAsync(string monitoredSystemMAC, string pluginName, string indicatorName) {
            this.GetFilterAsync(monitoredSystemMAC, pluginName, indicatorName, null);
        }
        
        /// <remarks/>
        public void GetFilterAsync(string monitoredSystemMAC, string pluginName, string indicatorName, object userState) {
            if ((this.GetFilterOperationCompleted == null)) {
                this.GetFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilterOperationCompleted);
            }
            this.InvokeAsync("GetFilter", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorName}, this.GetFilterOperationCompleted, userState);
        }
        
        private void OnGetFilterOperationCompleted(object arg) {
            if ((this.GetFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilterCompleted(this, new GetFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetUpdateIntervals", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
        public TupleOfstringNullableOflongU6ho3Bhd[] GetUpdateIntervals([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName) {
            object[] results = this.Invoke("GetUpdateIntervals", new object[] {
                        monitoredSystemMAC,
                        pluginName});
            return ((TupleOfstringNullableOflongU6ho3Bhd[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdateIntervalsAsync(string monitoredSystemMAC, string pluginName) {
            this.GetUpdateIntervalsAsync(monitoredSystemMAC, pluginName, null);
        }
        
        /// <remarks/>
        public void GetUpdateIntervalsAsync(string monitoredSystemMAC, string pluginName, object userState) {
            if ((this.GetUpdateIntervalsOperationCompleted == null)) {
                this.GetUpdateIntervalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdateIntervalsOperationCompleted);
            }
            this.InvokeAsync("GetUpdateIntervals", new object[] {
                        monitoredSystemMAC,
                        pluginName}, this.GetUpdateIntervalsOperationCompleted, userState);
        }
        
        private void OnGetUpdateIntervalsOperationCompleted(object arg) {
            if ((this.GetUpdateIntervalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdateIntervalsCompleted(this, new GetUpdateIntervalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/GetUpdateInterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetUpdateInterval([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string monitoredSystemMAC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pluginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string indicatorName, out long GetUpdateIntervalResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetUpdateIntervalResultSpecified) {
            object[] results = this.Invoke("GetUpdateInterval", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorName});
            GetUpdateIntervalResult = ((long)(results[0]));
            GetUpdateIntervalResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetUpdateIntervalAsync(string monitoredSystemMAC, string pluginName, string indicatorName) {
            this.GetUpdateIntervalAsync(monitoredSystemMAC, pluginName, indicatorName, null);
        }
        
        /// <remarks/>
        public void GetUpdateIntervalAsync(string monitoredSystemMAC, string pluginName, string indicatorName, object userState) {
            if ((this.GetUpdateIntervalOperationCompleted == null)) {
                this.GetUpdateIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdateIntervalOperationCompleted);
            }
            this.InvokeAsync("GetUpdateInterval", new object[] {
                        monitoredSystemMAC,
                        pluginName,
                        indicatorName}, this.GetUpdateIntervalOperationCompleted, userState);
        }
        
        private void OnGetUpdateIntervalOperationCompleted(object arg) {
            if ((this.GetUpdateIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdateIntervalCompleted(this, new GetUpdateIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWorkstationWebService/WriteLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteLog([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string message, LogType type, [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeSpecified) {
            this.Invoke("WriteLog", new object[] {
                        message,
                        type,
                        typeSpecified});
        }
        
        /// <remarks/>
        public void WriteLogAsync(string message, LogType type, bool typeSpecified) {
            this.WriteLogAsync(message, type, typeSpecified, null);
        }
        
        /// <remarks/>
        public void WriteLogAsync(string message, LogType type, bool typeSpecified, object userState) {
            if ((this.WriteLogOperationCompleted == null)) {
                this.WriteLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteLogOperationCompleted);
            }
            this.InvokeAsync("WriteLog", new object[] {
                        message,
                        type,
                        typeSpecified}, this.WriteLogOperationCompleted, userState);
        }
        
        private void OnWriteLogOperationCompleted(object arg) {
            if ((this.WriteLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
    public partial class PluginMetadata {
        
        private string companyField;
        
        private string copyrightField;
        
        private string descriptionField;
        
        private string fileNameField;
        
        private IndicatorSettings[] indicatorsField;
        
        private string nameField;
        
        private string productField;
        
        private Version versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Copyright {
            get {
                return this.copyrightField;
            }
            set {
                this.copyrightField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public IndicatorSettings[] Indicators {
            get {
                return this.indicatorsField;
            }
            set {
                this.indicatorsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Version Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
    public partial class IndicatorSettings {
        
        private DataType dataTypeField;
        
        private bool dataTypeFieldSpecified;
        
        private string filterStatementField;
        
        private string indicatorNameField;
        
        private string mappingDurationField;
        
        private string metricCriticalField;
        
        private string metricWarningField;
        
        private string monitoredSystemMACField;
        
        private string pluginNameField;
        
        private string storageDurationField;
        
        private string updateIntervalField;
        
        /// <remarks/>
        public DataType DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DataTypeSpecified {
            get {
                return this.dataTypeFieldSpecified;
            }
            set {
                this.dataTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FilterStatement {
            get {
                return this.filterStatementField;
            }
            set {
                this.filterStatementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string IndicatorName {
            get {
                return this.indicatorNameField;
            }
            set {
                this.indicatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="duration")]
        public string MappingDuration {
            get {
                return this.mappingDurationField;
            }
            set {
                this.mappingDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MetricCritical {
            get {
                return this.metricCriticalField;
            }
            set {
                this.metricCriticalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MetricWarning {
            get {
                return this.metricWarningField;
            }
            set {
                this.metricWarningField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MonitoredSystemMAC {
            get {
                return this.monitoredSystemMACField;
            }
            set {
                this.monitoredSystemMACField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PluginName {
            get {
                return this.pluginNameField;
            }
            set {
                this.pluginNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="duration")]
        public string StorageDuration {
            get {
                return this.storageDurationField;
            }
            set {
                this.storageDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="duration")]
        public string UpdateInterval {
            get {
                return this.updateIntervalField;
            }
            set {
                this.updateIntervalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
    public enum DataType {
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        Int,
        
        /// <remarks/>
        Byte,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class TupleOfstringNullableOflongU6ho3Bhd {
        
        private string m_Item1Field;
        
        private System.Nullable<long> m_Item2Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                this.m_Item1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                this.m_Item2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class TupleOfstringstring {
        
        private string m_Item1Field;
        
        private string m_Item2Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                this.m_Item1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                this.m_Item2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class TupleOfstringanyTypeDataTypedateTimefLvhoF9L {
        
        private string m_Item1Field;
        
        private object m_Item2Field;
        
        private DataType m_Item3Field;
        
        private System.DateTime m_Item4Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                this.m_Item1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                this.m_Item2Field = value;
            }
        }
        
        /// <remarks/>
        public DataType m_Item3 {
            get {
                return this.m_Item3Field;
            }
            set {
                this.m_Item3Field = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime m_Item4 {
            get {
                return this.m_Item4Field;
            }
            set {
                this.m_Item4Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
    public partial class PluginFile {
        
        private string fileAsBase64Field;
        
        private string fileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FileAsBase64 {
            get {
                return this.fileAsBase64Field;
            }
            set {
                this.fileAsBase64Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class Version {
        
        private int _BuildField;
        
        private int _MajorField;
        
        private int _MinorField;
        
        private int _RevisionField;
        
        /// <remarks/>
        public int _Build {
            get {
                return this._BuildField;
            }
            set {
                this._BuildField = value;
            }
        }
        
        /// <remarks/>
        public int _Major {
            get {
                return this._MajorField;
            }
            set {
                this._MajorField = value;
            }
        }
        
        /// <remarks/>
        public int _Minor {
            get {
                return this._MinorField;
            }
            set {
                this._MinorField = value;
            }
        }
        
        /// <remarks/>
        public int _Revision {
            get {
                return this._RevisionField;
            }
            set {
                this._RevisionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MISD.Core")]
    public enum LogType {
        
        /// <remarks/>
        Debug,
        
        /// <remarks/>
        Exception,
        
        /// <remarks/>
        Info,
        
        /// <remarks/>
        Warning,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMainUpdateIntervalCompletedEventHandler(object sender, GetMainUpdateIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMainUpdateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMainUpdateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SignInResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SignInResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SignOutCompletedEventHandler(object sender, SignOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SignOutResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SignOutResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPluginListCompletedEventHandler(object sender, GetPluginListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPluginListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPluginListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PluginMetadata[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PluginMetadata[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DownloadPluginsCompletedEventHandler(object sender, DownloadPluginsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadPluginsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadPluginsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PluginFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PluginFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadIndicatorValuesCompletedEventHandler(object sender, UploadIndicatorValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadIndicatorValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadIndicatorValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool UploadIndicatorValuesResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UploadIndicatorValuesResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadIndicatorValueCompletedEventHandler(object sender, UploadIndicatorValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadIndicatorValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadIndicatorValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool UploadIndicatorValueResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UploadIndicatorValueResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFiltersCompletedEventHandler(object sender, GetFiltersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TupleOfstringstring[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TupleOfstringstring[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFilterCompletedEventHandler(object sender, GetFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUpdateIntervalsCompletedEventHandler(object sender, GetUpdateIntervalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdateIntervalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdateIntervalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TupleOfstringNullableOflongU6ho3Bhd[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TupleOfstringNullableOflongU6ho3Bhd[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUpdateIntervalCompletedEventHandler(object sender, GetUpdateIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long GetUpdateIntervalResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetUpdateIntervalResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void WriteLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591