#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18010
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MISD.Server.Performancetest.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MISD")]
	public partial class MISDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertClusterCredential(ClusterCredential instance);
    partial void UpdateClusterCredential(ClusterCredential instance);
    partial void DeleteClusterCredential(ClusterCredential instance);
    partial void InsertValueString(ValueString instance);
    partial void UpdateValueString(ValueString instance);
    partial void DeleteValueString(ValueString instance);
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertEmailObserver(EmailObserver instance);
    partial void UpdateEmailObserver(EmailObserver instance);
    partial void DeleteEmailObserver(EmailObserver instance);
    partial void InsertIndicator(Indicator instance);
    partial void UpdateIndicator(Indicator instance);
    partial void DeleteIndicator(Indicator instance);
    partial void InsertIndicatorValue(IndicatorValue instance);
    partial void UpdateIndicatorValue(IndicatorValue instance);
    partial void DeleteIndicatorValue(IndicatorValue instance);
    partial void InsertLayout(Layout instance);
    partial void UpdateLayout(Layout instance);
    partial void DeleteLayout(Layout instance);
    partial void InsertMaintenance(Maintenance instance);
    partial void UpdateMaintenance(Maintenance instance);
    partial void DeleteMaintenance(Maintenance instance);
    partial void InsertMonitoredSystem(MonitoredSystem instance);
    partial void UpdateMonitoredSystem(MonitoredSystem instance);
    partial void DeleteMonitoredSystem(MonitoredSystem instance);
    partial void InsertOrganizationalUnit(OrganizationalUnit instance);
    partial void UpdateOrganizationalUnit(OrganizationalUnit instance);
    partial void DeleteOrganizationalUnit(OrganizationalUnit instance);
    partial void InsertPluginMetadata(PluginMetadata instance);
    partial void UpdatePluginMetadata(PluginMetadata instance);
    partial void DeletePluginMetadata(PluginMetadata instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertValueByte(ValueByte instance);
    partial void UpdateValueByte(ValueByte instance);
    partial void DeleteValueByte(ValueByte instance);
    partial void InsertValueFloat(ValueFloat instance);
    partial void UpdateValueFloat(ValueFloat instance);
    partial void DeleteValueFloat(ValueFloat instance);
    partial void InsertValueInt(ValueInt instance);
    partial void UpdateValueInt(ValueInt instance);
    partial void DeleteValueInt(ValueInt instance);
    #endregion
		
		public MISDDataContext() : 
				base(global::MISD.Server.Performancetest.Properties.Settings.Default.MISDConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public MISDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MISDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MISDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MISDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ClusterCredential> ClusterCredential
		{
			get
			{
				return this.GetTable<ClusterCredential>();
			}
		}
		
		public System.Data.Linq.Table<ValueString> ValueString
		{
			get
			{
				return this.GetTable<ValueString>();
			}
		}
		
		public System.Data.Linq.Table<Email> Email
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<EmailObserver> EmailObserver
		{
			get
			{
				return this.GetTable<EmailObserver>();
			}
		}
		
		public System.Data.Linq.Table<Indicator> Indicator
		{
			get
			{
				return this.GetTable<Indicator>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorValue> IndicatorValue
		{
			get
			{
				return this.GetTable<IndicatorValue>();
			}
		}
		
		public System.Data.Linq.Table<Layout> Layout
		{
			get
			{
				return this.GetTable<Layout>();
			}
		}
		
		public System.Data.Linq.Table<Maintenance> Maintenance
		{
			get
			{
				return this.GetTable<Maintenance>();
			}
		}
		
		public System.Data.Linq.Table<MonitoredSystem> MonitoredSystem
		{
			get
			{
				return this.GetTable<MonitoredSystem>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationalUnit> OrganizationalUnit
		{
			get
			{
				return this.GetTable<OrganizationalUnit>();
			}
		}
		
		public System.Data.Linq.Table<PluginMetadata> PluginMetadata
		{
			get
			{
				return this.GetTable<PluginMetadata>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ValueByte> ValueByte
		{
			get
			{
				return this.GetTable<ValueByte>();
			}
		}
		
		public System.Data.Linq.Table<ValueFloat> ValueFloat
		{
			get
			{
				return this.GetTable<ValueFloat>();
			}
		}
		
		public System.Data.Linq.Table<ValueInt> ValueInt
		{
			get
			{
				return this.GetTable<ValueInt>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClusterCredential")]
	public partial class ClusterCredential : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _HeadNodeUrl;
		
		private string _Username;
		
		private string _Password;
		
		private byte _Platform;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHeadNodeUrlChanging(string value);
    partial void OnHeadNodeUrlChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPlatformChanging(byte value);
    partial void OnPlatformChanged();
    #endregion
		
		public ClusterCredential()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadNodeUrl", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string HeadNodeUrl
		{
			get
			{
				return this._HeadNodeUrl;
			}
			set
			{
				if ((this._HeadNodeUrl != value))
				{
					this.OnHeadNodeUrlChanging(value);
					this.SendPropertyChanging();
					this._HeadNodeUrl = value;
					this.SendPropertyChanged("HeadNodeUrl");
					this.OnHeadNodeUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(64)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform", DbType="TinyInt NOT NULL")]
		public byte Platform
		{
			get
			{
				return this._Platform;
			}
			set
			{
				if ((this._Platform != value))
				{
					this.OnPlatformChanging(value);
					this.SendPropertyChanging();
					this._Platform = value;
					this.SendPropertyChanged("Platform");
					this.OnPlatformChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValueString")]
	public partial class ValueString : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private EntitySet<IndicatorValue> _IndicatorValue;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ValueString()
		{
			this._IndicatorValue = new EntitySet<IndicatorValue>(new Action<IndicatorValue>(this.attach_IndicatorValue), new Action<IndicatorValue>(this.detach_IndicatorValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueString_IndicatorValue", Storage="_IndicatorValue", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<IndicatorValue> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				this._IndicatorValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueString = this;
		}
		
		private void detach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueString = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Email")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Address;
		
		private string _ReceiverName;
		
		private bool _DailMail;
		
		private EntitySet<EmailObserver> _EmailObserver;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnReceiverNameChanging(string value);
    partial void OnReceiverNameChanged();
    partial void OnDailMailChanging(bool value);
    partial void OnDailMailChanged();
    #endregion
		
		public Email()
		{
			this._EmailObserver = new EntitySet<EmailObserver>(new Action<EmailObserver>(this.attach_EmailObserver), new Action<EmailObserver>(this.detach_EmailObserver));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ReceiverName
		{
			get
			{
				return this._ReceiverName;
			}
			set
			{
				if ((this._ReceiverName != value))
				{
					this.OnReceiverNameChanging(value);
					this.SendPropertyChanging();
					this._ReceiverName = value;
					this.SendPropertyChanged("ReceiverName");
					this.OnReceiverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailMail", DbType="Bit NOT NULL")]
		public bool DailMail
		{
			get
			{
				return this._DailMail;
			}
			set
			{
				if ((this._DailMail != value))
				{
					this.OnDailMailChanging(value);
					this.SendPropertyChanging();
					this._DailMail = value;
					this.SendPropertyChanged("DailMail");
					this.OnDailMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_EmailObserver", Storage="_EmailObserver", ThisKey="ID", OtherKey="EmailID")]
		public EntitySet<EmailObserver> EmailObserver
		{
			get
			{
				return this._EmailObserver;
			}
			set
			{
				this._EmailObserver.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailObserver(EmailObserver entity)
		{
			this.SendPropertyChanging();
			entity.Email = this;
		}
		
		private void detach_EmailObserver(EmailObserver entity)
		{
			this.SendPropertyChanging();
			entity.Email = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailObserver")]
	public partial class EmailObserver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EmailID;
		
		private int _MonitoredSystemID;
		
		private EntityRef<Email> _Email;
		
		private EntityRef<MonitoredSystem> _MonitoredSystem;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailIDChanging(int value);
    partial void OnEmailIDChanged();
    partial void OnMonitoredSystemIDChanging(int value);
    partial void OnMonitoredSystemIDChanged();
    #endregion
		
		public EmailObserver()
		{
			this._Email = default(EntityRef<Email>);
			this._MonitoredSystem = default(EntityRef<MonitoredSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", DbType="Int NOT NULL")]
		public int EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					if (this._Email.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonitoredSystemID", DbType="Int NOT NULL")]
		public int MonitoredSystemID
		{
			get
			{
				return this._MonitoredSystemID;
			}
			set
			{
				if ((this._MonitoredSystemID != value))
				{
					if (this._MonitoredSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonitoredSystemIDChanging(value);
					this.SendPropertyChanging();
					this._MonitoredSystemID = value;
					this.SendPropertyChanged("MonitoredSystemID");
					this.OnMonitoredSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_EmailObserver", Storage="_Email", ThisKey="EmailID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Email Email
		{
			get
			{
				return this._Email.Entity;
			}
			set
			{
				Email previousValue = this._Email.Entity;
				if (((previousValue != value) 
							|| (this._Email.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Email.Entity = null;
						previousValue.EmailObserver.Remove(this);
					}
					this._Email.Entity = value;
					if ((value != null))
					{
						value.EmailObserver.Add(this);
						this._EmailID = value.ID;
					}
					else
					{
						this._EmailID = default(int);
					}
					this.SendPropertyChanged("Email");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_EmailObserver", Storage="_MonitoredSystem", ThisKey="MonitoredSystemID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MonitoredSystem MonitoredSystem
		{
			get
			{
				return this._MonitoredSystem.Entity;
			}
			set
			{
				MonitoredSystem previousValue = this._MonitoredSystem.Entity;
				if (((previousValue != value) 
							|| (this._MonitoredSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonitoredSystem.Entity = null;
						previousValue.EmailObserver.Remove(this);
					}
					this._MonitoredSystem.Entity = value;
					if ((value != null))
					{
						value.EmailObserver.Add(this);
						this._MonitoredSystemID = value.ID;
					}
					else
					{
						this._MonitoredSystemID = default(int);
					}
					this.SendPropertyChanged("MonitoredSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Indicator")]
	public partial class Indicator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private long _UpdateInterval;
		
		private string _FilterStatement;
		
		private string _StatementWarning;
		
		private string _StatementCritical;
		
		private byte _ValueType;
		
		private long _MappingDuration;
		
		private long _StorageDuration;
		
		private int _PluginMetadataID;
		
		private int _MonitoredSystemID;
		
		private EntitySet<IndicatorValue> _IndicatorValue;
		
		private EntityRef<MonitoredSystem> _MonitoredSystem;
		
		private EntityRef<PluginMetadata> _PluginMetadata;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUpdateIntervalChanging(long value);
    partial void OnUpdateIntervalChanged();
    partial void OnFilterStatementChanging(string value);
    partial void OnFilterStatementChanged();
    partial void OnStatementWarningChanging(string value);
    partial void OnStatementWarningChanged();
    partial void OnStatementCriticalChanging(string value);
    partial void OnStatementCriticalChanged();
    partial void OnValueTypeChanging(byte value);
    partial void OnValueTypeChanged();
    partial void OnMappingDurationChanging(long value);
    partial void OnMappingDurationChanged();
    partial void OnStorageDurationChanging(long value);
    partial void OnStorageDurationChanged();
    partial void OnPluginMetadataIDChanging(int value);
    partial void OnPluginMetadataIDChanged();
    partial void OnMonitoredSystemIDChanging(int value);
    partial void OnMonitoredSystemIDChanged();
    #endregion
		
		public Indicator()
		{
			this._IndicatorValue = new EntitySet<IndicatorValue>(new Action<IndicatorValue>(this.attach_IndicatorValue), new Action<IndicatorValue>(this.detach_IndicatorValue));
			this._MonitoredSystem = default(EntityRef<MonitoredSystem>);
			this._PluginMetadata = default(EntityRef<PluginMetadata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateInterval", DbType="BigInt NOT NULL")]
		public long UpdateInterval
		{
			get
			{
				return this._UpdateInterval;
			}
			set
			{
				if ((this._UpdateInterval != value))
				{
					this.OnUpdateIntervalChanging(value);
					this.SendPropertyChanging();
					this._UpdateInterval = value;
					this.SendPropertyChanged("UpdateInterval");
					this.OnUpdateIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterStatement", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string FilterStatement
		{
			get
			{
				return this._FilterStatement;
			}
			set
			{
				if ((this._FilterStatement != value))
				{
					this.OnFilterStatementChanging(value);
					this.SendPropertyChanging();
					this._FilterStatement = value;
					this.SendPropertyChanged("FilterStatement");
					this.OnFilterStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatementWarning", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string StatementWarning
		{
			get
			{
				return this._StatementWarning;
			}
			set
			{
				if ((this._StatementWarning != value))
				{
					this.OnStatementWarningChanging(value);
					this.SendPropertyChanging();
					this._StatementWarning = value;
					this.SendPropertyChanged("StatementWarning");
					this.OnStatementWarningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatementCritical", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string StatementCritical
		{
			get
			{
				return this._StatementCritical;
			}
			set
			{
				if ((this._StatementCritical != value))
				{
					this.OnStatementCriticalChanging(value);
					this.SendPropertyChanging();
					this._StatementCritical = value;
					this.SendPropertyChanged("StatementCritical");
					this.OnStatementCriticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueType", DbType="TinyInt NOT NULL")]
		public byte ValueType
		{
			get
			{
				return this._ValueType;
			}
			set
			{
				if ((this._ValueType != value))
				{
					this.OnValueTypeChanging(value);
					this.SendPropertyChanging();
					this._ValueType = value;
					this.SendPropertyChanged("ValueType");
					this.OnValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingDuration", DbType="BigInt NOT NULL")]
		public long MappingDuration
		{
			get
			{
				return this._MappingDuration;
			}
			set
			{
				if ((this._MappingDuration != value))
				{
					this.OnMappingDurationChanging(value);
					this.SendPropertyChanging();
					this._MappingDuration = value;
					this.SendPropertyChanged("MappingDuration");
					this.OnMappingDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StorageDuration", DbType="BigInt NOT NULL")]
		public long StorageDuration
		{
			get
			{
				return this._StorageDuration;
			}
			set
			{
				if ((this._StorageDuration != value))
				{
					this.OnStorageDurationChanging(value);
					this.SendPropertyChanging();
					this._StorageDuration = value;
					this.SendPropertyChanged("StorageDuration");
					this.OnStorageDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginMetadataID", DbType="Int NOT NULL")]
		public int PluginMetadataID
		{
			get
			{
				return this._PluginMetadataID;
			}
			set
			{
				if ((this._PluginMetadataID != value))
				{
					if (this._PluginMetadata.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginMetadataIDChanging(value);
					this.SendPropertyChanging();
					this._PluginMetadataID = value;
					this.SendPropertyChanged("PluginMetadataID");
					this.OnPluginMetadataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonitoredSystemID", DbType="Int NOT NULL")]
		public int MonitoredSystemID
		{
			get
			{
				return this._MonitoredSystemID;
			}
			set
			{
				if ((this._MonitoredSystemID != value))
				{
					if (this._MonitoredSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonitoredSystemIDChanging(value);
					this.SendPropertyChanging();
					this._MonitoredSystemID = value;
					this.SendPropertyChanged("MonitoredSystemID");
					this.OnMonitoredSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicator_IndicatorValue", Storage="_IndicatorValue", ThisKey="ID", OtherKey="IndicatorID")]
		public EntitySet<IndicatorValue> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				this._IndicatorValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_Indicator", Storage="_MonitoredSystem", ThisKey="MonitoredSystemID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MonitoredSystem MonitoredSystem
		{
			get
			{
				return this._MonitoredSystem.Entity;
			}
			set
			{
				MonitoredSystem previousValue = this._MonitoredSystem.Entity;
				if (((previousValue != value) 
							|| (this._MonitoredSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonitoredSystem.Entity = null;
						previousValue.Indicator.Remove(this);
					}
					this._MonitoredSystem.Entity = value;
					if ((value != null))
					{
						value.Indicator.Add(this);
						this._MonitoredSystemID = value.ID;
					}
					else
					{
						this._MonitoredSystemID = default(int);
					}
					this.SendPropertyChanged("MonitoredSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PluginMetadata_Indicator", Storage="_PluginMetadata", ThisKey="PluginMetadataID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PluginMetadata PluginMetadata
		{
			get
			{
				return this._PluginMetadata.Entity;
			}
			set
			{
				PluginMetadata previousValue = this._PluginMetadata.Entity;
				if (((previousValue != value) 
							|| (this._PluginMetadata.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PluginMetadata.Entity = null;
						previousValue.Indicator.Remove(this);
					}
					this._PluginMetadata.Entity = value;
					if ((value != null))
					{
						value.Indicator.Add(this);
						this._PluginMetadataID = value.ID;
					}
					else
					{
						this._PluginMetadataID = default(int);
					}
					this.SendPropertyChanged("PluginMetadata");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.Indicator = this;
		}
		
		private void detach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.Indicator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorValue")]
	public partial class IndicatorValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ValueID;
		
		private long _Timestamp;
		
		private byte _Mapping;
		
		private int _IndicatorID;
		
		private EntityRef<Indicator> _Indicator;
		
		private EntityRef<ValueString> _ValueString;
		
		private EntityRef<ValueByte> _ValueByte;
		
		private EntityRef<ValueFloat> _ValueFloat;
		
		private EntityRef<ValueInt> _ValueInt;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnTimestampChanging(long value);
    partial void OnTimestampChanged();
    partial void OnMappingChanging(byte value);
    partial void OnMappingChanged();
    partial void OnIndicatorIDChanging(int value);
    partial void OnIndicatorIDChanged();
    #endregion
		
		public IndicatorValue()
		{
			this._Indicator = default(EntityRef<Indicator>);
			this._ValueString = default(EntityRef<ValueString>);
			this._ValueByte = default(EntityRef<ValueByte>);
			this._ValueFloat = default(EntityRef<ValueFloat>);
			this._ValueInt = default(EntityRef<ValueInt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					if ((((this._ValueString.HasLoadedOrAssignedValue || this._ValueByte.HasLoadedOrAssignedValue) 
								|| this._ValueFloat.HasLoadedOrAssignedValue) 
								|| this._ValueInt.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="BigInt NOT NULL")]
		public long Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mapping", DbType="TinyInt NOT NULL")]
		public byte Mapping
		{
			get
			{
				return this._Mapping;
			}
			set
			{
				if ((this._Mapping != value))
				{
					this.OnMappingChanging(value);
					this.SendPropertyChanging();
					this._Mapping = value;
					this.SendPropertyChanged("Mapping");
					this.OnMappingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorID", DbType="Int NOT NULL")]
		public int IndicatorID
		{
			get
			{
				return this._IndicatorID;
			}
			set
			{
				if ((this._IndicatorID != value))
				{
					if (this._Indicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorID = value;
					this.SendPropertyChanged("IndicatorID");
					this.OnIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicator_IndicatorValue", Storage="_Indicator", ThisKey="IndicatorID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Indicator Indicator
		{
			get
			{
				return this._Indicator.Entity;
			}
			set
			{
				Indicator previousValue = this._Indicator.Entity;
				if (((previousValue != value) 
							|| (this._Indicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Indicator.Entity = null;
						previousValue.IndicatorValue.Remove(this);
					}
					this._Indicator.Entity = value;
					if ((value != null))
					{
						value.IndicatorValue.Add(this);
						this._IndicatorID = value.ID;
					}
					else
					{
						this._IndicatorID = default(int);
					}
					this.SendPropertyChanged("Indicator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueString_IndicatorValue", Storage="_ValueString", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ValueString ValueString
		{
			get
			{
				return this._ValueString.Entity;
			}
			set
			{
				ValueString previousValue = this._ValueString.Entity;
				if (((previousValue != value) 
							|| (this._ValueString.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValueString.Entity = null;
						previousValue.IndicatorValue.Remove(this);
					}
					this._ValueString.Entity = value;
					if ((value != null))
					{
						value.IndicatorValue.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("ValueString");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueByte_IndicatorValue", Storage="_ValueByte", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ValueByte ValueByte
		{
			get
			{
				return this._ValueByte.Entity;
			}
			set
			{
				ValueByte previousValue = this._ValueByte.Entity;
				if (((previousValue != value) 
							|| (this._ValueByte.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValueByte.Entity = null;
						previousValue.IndicatorValue.Remove(this);
					}
					this._ValueByte.Entity = value;
					if ((value != null))
					{
						value.IndicatorValue.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("ValueByte");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueFloat_IndicatorValue", Storage="_ValueFloat", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ValueFloat ValueFloat
		{
			get
			{
				return this._ValueFloat.Entity;
			}
			set
			{
				ValueFloat previousValue = this._ValueFloat.Entity;
				if (((previousValue != value) 
							|| (this._ValueFloat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValueFloat.Entity = null;
						previousValue.IndicatorValue.Remove(this);
					}
					this._ValueFloat.Entity = value;
					if ((value != null))
					{
						value.IndicatorValue.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("ValueFloat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueInt_IndicatorValue", Storage="_ValueInt", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ValueInt ValueInt
		{
			get
			{
				return this._ValueInt.Entity;
			}
			set
			{
				ValueInt previousValue = this._ValueInt.Entity;
				if (((previousValue != value) 
							|| (this._ValueInt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValueInt.Entity = null;
						previousValue.IndicatorValue.Remove(this);
					}
					this._ValueInt.Entity = value;
					if ((value != null))
					{
						value.IndicatorValue.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("ValueInt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Layout")]
	public partial class Layout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _Date;
		
		private System.Data.Linq.Binary _PreviewImage;
		
		private string _Data;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPreviewImageChanging(System.Data.Linq.Binary value);
    partial void OnPreviewImageChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Layout()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviewImage", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PreviewImage
		{
			get
			{
				return this._PreviewImage;
			}
			set
			{
				if ((this._PreviewImage != value))
				{
					this.OnPreviewImageChanging(value);
					this.SendPropertyChanging();
					this._PreviewImage = value;
					this.SendPropertyChanged("PreviewImage");
					this.OnPreviewImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Layout", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Layout.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Layout.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maintenance")]
	public partial class Maintenance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Beginning;
		
		private System.Nullable<System.DateTime> _End;
		
		private int _MonitoredSystemID;
		
		private EntityRef<MonitoredSystem> _MonitoredSystem;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBeginningChanging(System.DateTime value);
    partial void OnBeginningChanged();
    partial void OnEndChanging(System.Nullable<System.DateTime> value);
    partial void OnEndChanged();
    partial void OnMonitoredSystemIDChanging(int value);
    partial void OnMonitoredSystemIDChanged();
    #endregion
		
		public Maintenance()
		{
			this._MonitoredSystem = default(EntityRef<MonitoredSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beginning", DbType="DateTime NOT NULL")]
		public System.DateTime Beginning
		{
			get
			{
				return this._Beginning;
			}
			set
			{
				if ((this._Beginning != value))
				{
					this.OnBeginningChanging(value);
					this.SendPropertyChanging();
					this._Beginning = value;
					this.SendPropertyChanged("Beginning");
					this.OnBeginningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="DateTime")]
		public System.Nullable<System.DateTime> End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonitoredSystemID", DbType="Int NOT NULL")]
		public int MonitoredSystemID
		{
			get
			{
				return this._MonitoredSystemID;
			}
			set
			{
				if ((this._MonitoredSystemID != value))
				{
					if (this._MonitoredSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonitoredSystemIDChanging(value);
					this.SendPropertyChanging();
					this._MonitoredSystemID = value;
					this.SendPropertyChanged("MonitoredSystemID");
					this.OnMonitoredSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_Maintenance", Storage="_MonitoredSystem", ThisKey="MonitoredSystemID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MonitoredSystem MonitoredSystem
		{
			get
			{
				return this._MonitoredSystem.Entity;
			}
			set
			{
				MonitoredSystem previousValue = this._MonitoredSystem.Entity;
				if (((previousValue != value) 
							|| (this._MonitoredSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonitoredSystem.Entity = null;
						previousValue.Maintenance.Remove(this);
					}
					this._MonitoredSystem.Entity = value;
					if ((value != null))
					{
						value.Maintenance.Add(this);
						this._MonitoredSystemID = value.ID;
					}
					else
					{
						this._MonitoredSystemID = default(int);
					}
					this.SendPropertyChanged("MonitoredSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonitoredSystem")]
	public partial class MonitoredSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationalUnitID;
		
		private string _Name;
		
		private string _FQDN;
		
		private bool _IsAvailable;
		
		private bool _IsIgnored;
		
		private byte _OperatingSystem;
		
		private bool _IsInMaintenanceMode;
		
		private string _MacAddress;
		
		private System.Nullable<byte> _Status;
		
		private System.Nullable<long> _WarningEnd;
		
		private System.Nullable<long> _CriticalEnd;
		
		private System.Nullable<long> _LastUpdate;
		
		private EntitySet<EmailObserver> _EmailObserver;
		
		private EntitySet<Indicator> _Indicator;
		
		private EntitySet<Maintenance> _Maintenance;
		
		private EntityRef<OrganizationalUnit> _OrganizationalUnit;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationalUnitIDChanging(int value);
    partial void OnOrganizationalUnitIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFQDNChanging(string value);
    partial void OnFQDNChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnIsIgnoredChanging(bool value);
    partial void OnIsIgnoredChanged();
    partial void OnOperatingSystemChanging(byte value);
    partial void OnOperatingSystemChanged();
    partial void OnIsInMaintenanceModeChanging(bool value);
    partial void OnIsInMaintenanceModeChanged();
    partial void OnMacAddressChanging(string value);
    partial void OnMacAddressChanged();
    partial void OnStatusChanging(System.Nullable<byte> value);
    partial void OnStatusChanged();
    partial void OnWarningEndChanging(System.Nullable<long> value);
    partial void OnWarningEndChanged();
    partial void OnCriticalEndChanging(System.Nullable<long> value);
    partial void OnCriticalEndChanged();
    partial void OnLastUpdateChanging(System.Nullable<long> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public MonitoredSystem()
		{
			this._EmailObserver = new EntitySet<EmailObserver>(new Action<EmailObserver>(this.attach_EmailObserver), new Action<EmailObserver>(this.detach_EmailObserver));
			this._Indicator = new EntitySet<Indicator>(new Action<Indicator>(this.attach_Indicator), new Action<Indicator>(this.detach_Indicator));
			this._Maintenance = new EntitySet<Maintenance>(new Action<Maintenance>(this.attach_Maintenance), new Action<Maintenance>(this.detach_Maintenance));
			this._OrganizationalUnit = default(EntityRef<OrganizationalUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationalUnitID", DbType="Int NOT NULL")]
		public int OrganizationalUnitID
		{
			get
			{
				return this._OrganizationalUnitID;
			}
			set
			{
				if ((this._OrganizationalUnitID != value))
				{
					if (this._OrganizationalUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationalUnitIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationalUnitID = value;
					this.SendPropertyChanged("OrganizationalUnitID");
					this.OnOrganizationalUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FQDN", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string FQDN
		{
			get
			{
				return this._FQDN;
			}
			set
			{
				if ((this._FQDN != value))
				{
					this.OnFQDNChanging(value);
					this.SendPropertyChanging();
					this._FQDN = value;
					this.SendPropertyChanged("FQDN");
					this.OnFQDNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIgnored", DbType="Bit NOT NULL")]
		public bool IsIgnored
		{
			get
			{
				return this._IsIgnored;
			}
			set
			{
				if ((this._IsIgnored != value))
				{
					this.OnIsIgnoredChanging(value);
					this.SendPropertyChanging();
					this._IsIgnored = value;
					this.SendPropertyChanged("IsIgnored");
					this.OnIsIgnoredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatingSystem", DbType="TinyInt NOT NULL")]
		public byte OperatingSystem
		{
			get
			{
				return this._OperatingSystem;
			}
			set
			{
				if ((this._OperatingSystem != value))
				{
					this.OnOperatingSystemChanging(value);
					this.SendPropertyChanging();
					this._OperatingSystem = value;
					this.SendPropertyChanged("OperatingSystem");
					this.OnOperatingSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInMaintenanceMode", DbType="Bit NOT NULL")]
		public bool IsInMaintenanceMode
		{
			get
			{
				return this._IsInMaintenanceMode;
			}
			set
			{
				if ((this._IsInMaintenanceMode != value))
				{
					this.OnIsInMaintenanceModeChanging(value);
					this.SendPropertyChanging();
					this._IsInMaintenanceMode = value;
					this.SendPropertyChanged("IsInMaintenanceMode");
					this.OnIsInMaintenanceModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MacAddress", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string MacAddress
		{
			get
			{
				return this._MacAddress;
			}
			set
			{
				if ((this._MacAddress != value))
				{
					this.OnMacAddressChanging(value);
					this.SendPropertyChanging();
					this._MacAddress = value;
					this.SendPropertyChanged("MacAddress");
					this.OnMacAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<byte> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarningEnd", DbType="BigInt")]
		public System.Nullable<long> WarningEnd
		{
			get
			{
				return this._WarningEnd;
			}
			set
			{
				if ((this._WarningEnd != value))
				{
					this.OnWarningEndChanging(value);
					this.SendPropertyChanging();
					this._WarningEnd = value;
					this.SendPropertyChanged("WarningEnd");
					this.OnWarningEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CriticalEnd", DbType="BigInt")]
		public System.Nullable<long> CriticalEnd
		{
			get
			{
				return this._CriticalEnd;
			}
			set
			{
				if ((this._CriticalEnd != value))
				{
					this.OnCriticalEndChanging(value);
					this.SendPropertyChanging();
					this._CriticalEnd = value;
					this.SendPropertyChanged("CriticalEnd");
					this.OnCriticalEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="BigInt")]
		public System.Nullable<long> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_EmailObserver", Storage="_EmailObserver", ThisKey="ID", OtherKey="MonitoredSystemID")]
		public EntitySet<EmailObserver> EmailObserver
		{
			get
			{
				return this._EmailObserver;
			}
			set
			{
				this._EmailObserver.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_Indicator", Storage="_Indicator", ThisKey="ID", OtherKey="MonitoredSystemID")]
		public EntitySet<Indicator> Indicator
		{
			get
			{
				return this._Indicator;
			}
			set
			{
				this._Indicator.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonitoredSystem_Maintenance", Storage="_Maintenance", ThisKey="ID", OtherKey="MonitoredSystemID")]
		public EntitySet<Maintenance> Maintenance
		{
			get
			{
				return this._Maintenance;
			}
			set
			{
				this._Maintenance.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationalUnit_MonitoredSystem", Storage="_OrganizationalUnit", ThisKey="OrganizationalUnitID", OtherKey="ID", IsForeignKey=true)]
		public OrganizationalUnit OrganizationalUnit
		{
			get
			{
				return this._OrganizationalUnit.Entity;
			}
			set
			{
				OrganizationalUnit previousValue = this._OrganizationalUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationalUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationalUnit.Entity = null;
						previousValue.MonitoredSystem.Remove(this);
					}
					this._OrganizationalUnit.Entity = value;
					if ((value != null))
					{
						value.MonitoredSystem.Add(this);
						this._OrganizationalUnitID = value.ID;
					}
					else
					{
						this._OrganizationalUnitID = default(int);
					}
					this.SendPropertyChanged("OrganizationalUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailObserver(EmailObserver entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = this;
		}
		
		private void detach_EmailObserver(EmailObserver entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = null;
		}
		
		private void attach_Indicator(Indicator entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = this;
		}
		
		private void detach_Indicator(Indicator entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = null;
		}
		
		private void attach_Maintenance(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = this;
		}
		
		private void detach_Maintenance(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.MonitoredSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationalUnit")]
	public partial class OrganizationalUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _FQDN;
		
		private System.Nullable<int> _Parent;
		
		private System.Nullable<long> _LastUpdate;
		
		private EntitySet<MonitoredSystem> _MonitoredSystem;
		
		private EntitySet<OrganizationalUnit> _OrganizationalUnit2;
		
		private EntityRef<OrganizationalUnit> _OrganizationalUnit1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFQDNChanging(string value);
    partial void OnFQDNChanged();
    partial void OnParentChanging(System.Nullable<int> value);
    partial void OnParentChanged();
    partial void OnLastUpdateChanging(System.Nullable<long> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public OrganizationalUnit()
		{
			this._MonitoredSystem = new EntitySet<MonitoredSystem>(new Action<MonitoredSystem>(this.attach_MonitoredSystem), new Action<MonitoredSystem>(this.detach_MonitoredSystem));
			this._OrganizationalUnit2 = new EntitySet<OrganizationalUnit>(new Action<OrganizationalUnit>(this.attach_OrganizationalUnit2), new Action<OrganizationalUnit>(this.detach_OrganizationalUnit2));
			this._OrganizationalUnit1 = default(EntityRef<OrganizationalUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FQDN", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string FQDN
		{
			get
			{
				return this._FQDN;
			}
			set
			{
				if ((this._FQDN != value))
				{
					this.OnFQDNChanging(value);
					this.SendPropertyChanging();
					this._FQDN = value;
					this.SendPropertyChanged("FQDN");
					this.OnFQDNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="Int")]
		public System.Nullable<int> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._OrganizationalUnit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="BigInt")]
		public System.Nullable<long> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationalUnit_MonitoredSystem", Storage="_MonitoredSystem", ThisKey="ID", OtherKey="OrganizationalUnitID")]
		public EntitySet<MonitoredSystem> MonitoredSystem
		{
			get
			{
				return this._MonitoredSystem;
			}
			set
			{
				this._MonitoredSystem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationalUnit_OrganizationalUnit", Storage="_OrganizationalUnit2", ThisKey="ID", OtherKey="Parent")]
		public EntitySet<OrganizationalUnit> OrganizationalUnit2
		{
			get
			{
				return this._OrganizationalUnit2;
			}
			set
			{
				this._OrganizationalUnit2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationalUnit_OrganizationalUnit", Storage="_OrganizationalUnit1", ThisKey="Parent", OtherKey="ID", IsForeignKey=true)]
		public OrganizationalUnit OrganizationalUnit1
		{
			get
			{
				return this._OrganizationalUnit1.Entity;
			}
			set
			{
				OrganizationalUnit previousValue = this._OrganizationalUnit1.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationalUnit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationalUnit1.Entity = null;
						previousValue.OrganizationalUnit2.Remove(this);
					}
					this._OrganizationalUnit1.Entity = value;
					if ((value != null))
					{
						value.OrganizationalUnit2.Add(this);
						this._Parent = value.ID;
					}
					else
					{
						this._Parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationalUnit1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonitoredSystem(MonitoredSystem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationalUnit = this;
		}
		
		private void detach_MonitoredSystem(MonitoredSystem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationalUnit = null;
		}
		
		private void attach_OrganizationalUnit2(OrganizationalUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationalUnit1 = this;
		}
		
		private void detach_OrganizationalUnit2(OrganizationalUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationalUnit1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PluginMetadata")]
	public partial class PluginMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Version;
		
		private string _Description;
		
		private string _FileName;
		
		private string _Copyright;
		
		private string _Company;
		
		private string _Product;
		
		private byte _Platform;
		
		private EntitySet<Indicator> _Indicator;
		
		private EntityRef<PluginMetadata> _PluginMetadata2;
		
		private EntityRef<PluginMetadata> _PluginMetadata1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCopyrightChanging(string value);
    partial void OnCopyrightChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnProductChanging(string value);
    partial void OnProductChanged();
    partial void OnPlatformChanging(byte value);
    partial void OnPlatformChanged();
    #endregion
		
		public PluginMetadata()
		{
			this._Indicator = new EntitySet<Indicator>(new Action<Indicator>(this.attach_Indicator), new Action<Indicator>(this.detach_Indicator));
			this._PluginMetadata2 = default(EntityRef<PluginMetadata>);
			this._PluginMetadata1 = default(EntityRef<PluginMetadata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._PluginMetadata1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copyright", DbType="NVarChar(256)")]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this.OnCopyrightChanging(value);
					this.SendPropertyChanging();
					this._Copyright = value;
					this.SendPropertyChanged("Copyright");
					this.OnCopyrightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NChar(64) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="NChar(64)")]
		public string Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this.OnProductChanging(value);
					this.SendPropertyChanging();
					this._Product = value;
					this.SendPropertyChanged("Product");
					this.OnProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform", DbType="TinyInt NOT NULL")]
		public byte Platform
		{
			get
			{
				return this._Platform;
			}
			set
			{
				if ((this._Platform != value))
				{
					this.OnPlatformChanging(value);
					this.SendPropertyChanging();
					this._Platform = value;
					this.SendPropertyChanged("Platform");
					this.OnPlatformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PluginMetadata_Indicator", Storage="_Indicator", ThisKey="ID", OtherKey="PluginMetadataID")]
		public EntitySet<Indicator> Indicator
		{
			get
			{
				return this._Indicator;
			}
			set
			{
				this._Indicator.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PluginMetadata_PluginMetadata", Storage="_PluginMetadata2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PluginMetadata PluginMetadata2
		{
			get
			{
				return this._PluginMetadata2.Entity;
			}
			set
			{
				PluginMetadata previousValue = this._PluginMetadata2.Entity;
				if (((previousValue != value) 
							|| (this._PluginMetadata2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PluginMetadata2.Entity = null;
						previousValue.PluginMetadata1 = null;
					}
					this._PluginMetadata2.Entity = value;
					if ((value != null))
					{
						value.PluginMetadata1 = this;
					}
					this.SendPropertyChanged("PluginMetadata2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PluginMetadata_PluginMetadata", Storage="_PluginMetadata1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public PluginMetadata PluginMetadata1
		{
			get
			{
				return this._PluginMetadata1.Entity;
			}
			set
			{
				PluginMetadata previousValue = this._PluginMetadata1.Entity;
				if (((previousValue != value) 
							|| (this._PluginMetadata1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PluginMetadata1.Entity = null;
						previousValue.PluginMetadata2 = null;
					}
					this._PluginMetadata1.Entity = value;
					if ((value != null))
					{
						value.PluginMetadata2 = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PluginMetadata1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Indicator(Indicator entity)
		{
			this.SendPropertyChanging();
			entity.PluginMetadata = this;
		}
		
		private void detach_Indicator(Indicator entity)
		{
			this.SendPropertyChanging();
			entity.PluginMetadata = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Layout> _Layout;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User()
		{
			this._Layout = new EntitySet<Layout>(new Action<Layout>(this.attach_Layout), new Action<Layout>(this.detach_Layout));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Layout", Storage="_Layout", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Layout> Layout
		{
			get
			{
				return this._Layout;
			}
			set
			{
				this._Layout.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Layout(Layout entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Layout(Layout entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValueByte")]
	public partial class ValueByte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _Value;
		
		private EntitySet<IndicatorValue> _IndicatorValue;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public ValueByte()
		{
			this._IndicatorValue = new EntitySet<IndicatorValue>(new Action<IndicatorValue>(this.attach_IndicatorValue), new Action<IndicatorValue>(this.detach_IndicatorValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueByte_IndicatorValue", Storage="_IndicatorValue", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<IndicatorValue> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				this._IndicatorValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueByte = this;
		}
		
		private void detach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueByte = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValueFloat")]
	public partial class ValueFloat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private double _Value;
		
		private EntitySet<IndicatorValue> _IndicatorValue;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public ValueFloat()
		{
			this._IndicatorValue = new EntitySet<IndicatorValue>(new Action<IndicatorValue>(this.attach_IndicatorValue), new Action<IndicatorValue>(this.detach_IndicatorValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueFloat_IndicatorValue", Storage="_IndicatorValue", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<IndicatorValue> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				this._IndicatorValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueFloat = this;
		}
		
		private void detach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueFloat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValueInt")]
	public partial class ValueInt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Value;
		
		private EntitySet<IndicatorValue> _IndicatorValue;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public ValueInt()
		{
			this._IndicatorValue = new EntitySet<IndicatorValue>(new Action<IndicatorValue>(this.attach_IndicatorValue), new Action<IndicatorValue>(this.detach_IndicatorValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValueInt_IndicatorValue", Storage="_IndicatorValue", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<IndicatorValue> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				this._IndicatorValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueInt = this;
		}
		
		private void detach_IndicatorValue(IndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.ValueInt = null;
		}
	}
}
#pragma warning restore 1591
